##! see https://github.com/openssl/openssl/blob/81fc390/crypto/ec/ec_curve.c for the original source

### the global pattern of a full EC struct
###
### # Example:
### the first EC curve of openssl is the following
### ```c
### static const struct {
###     EC_CURVE_DATA h;
###     unsigned char data[20 + 24 * 6];
### } _EC_NIST_PRIME_192 = {
###     {
###         NID_X9_62_prime_field, 20, 24, 1
###     },
###     {
###         /* seed */
###         0x30, 0x45, 0xAE, 0x6F, 0xC8, 0x42, 0x2F, 0x64, 0xED, 0x57, 0x95, 0x28,
###         0xD3, 0x81, 0x20, 0xEA, 0xE1, 0x21, 0x96, 0xD5,
###         /* p */
###         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
###         0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
###         /* a */
###         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
###         0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC,
###         /* b */
###         0x64, 0x21, 0x05, 0x19, 0xE5, 0x9C, 0x80, 0xE7, 0x0F, 0xA7, 0xE9, 0xAB,
###         0x72, 0x24, 0x30, 0x49, 0xFE, 0xB8, 0xDE, 0xEC, 0xC1, 0x46, 0xB9, 0xB1,
###         /* x */
###         0x18, 0x8D, 0xA8, 0x0E, 0xB0, 0x30, 0x90, 0xF6, 0x7C, 0xBF, 0x20, 0xEB,
###         0x43, 0xA1, 0x88, 0x00, 0xF4, 0xFF, 0x0A, 0xFD, 0x82, 0xFF, 0x10, 0x12,
###         /* y */
###         0x07, 0x19, 0x2b, 0x95, 0xff, 0xc8, 0xda, 0x78, 0x63, 0x10, 0x11, 0xed,
###         0x6b, 0x24, 0xcd, 0xd5, 0x73, 0xf9, 0x77, 0xa1, 0x1e, 0x79, 0x48, 0x11,
###         /* order */
###         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
###         0x99, 0xDE, 0xF8, 0x36, 0x14, 0x6B, 0xC9, 0xB1, 0xB4, 0xD2, 0x28, 0x31
###     }
### };
### ```
### which is equivalent to the following in flattened form
### ```
### { EC_CURVE_DATA h; unsigned char data[20 + 24 * 6];} _EC_NIST_PRIME_192 = { { NID_X9_62_prime_field, 20, 24, 1 }, { /* seed */ 0x30, 0x45, 0xAE, ... }
###  --------------------------------------------------  ------------------       --------------------------------      --------------------------------
###                       .*                                 (?<name>.+)                   (?<field>.+)                         (?<parameters>.+)
### ```
### hence the pattern below :)
###
### in the end, the `struct` above would get parsed in this first step into
### ```
### ╭────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
### │ name       │ _EC_NIST_PRIME_192                                                                                                                                                                                  │
### │ field      │ NID_X9_62_prime_field, 20, 24, 1                                                                                                                                                                    │
### │ parameters │ /* seed */ 0x30, 0x45, 0xAE, 0x6F, 0xC8, 0x42, 0x2F, 0x64, 0xED, 0x57, 0x95, 0x28, 0xD3, 0x81, 0x20, 0xEA, 0xE1, 0x21, 0x96, 0xD5, /* p */ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,    │
### │            │ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* a */ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,   │
### │            │ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, /* b */ 0x64, 0x21, 0x05, 0x19, 0xE5, 0x9C, 0x80, 0xE7, 0x0F, 0xA7, 0xE9, 0xAB, 0x72, 0x24, 0x30, 0x49, 0xFE, 0xB8, 0xDE, 0xEC, 0xC1, 0x46, 0xB9,   │
### │            │ 0xB1, /* x */ 0x18, 0x8D, 0xA8, 0x0E, 0xB0, 0x30, 0x90, 0xF6, 0x7C, 0xBF, 0x20, 0xEB, 0x43, 0xA1, 0x88, 0x00, 0xF4, 0xFF, 0x0A, 0xFD, 0x82, 0xFF, 0x10, 0x12, /* y */ 0x07, 0x19, 0x2b, 0x95, 0xff, │
### │            │  0xc8, 0xda, 0x78, 0x63, 0x10, 0x11, 0xed, 0x6b, 0x24, 0xcd, 0xd5, 0x73, 0xf9, 0x77, 0xa1, 0x1e, 0x79, 0x48, 0x11, /* order */ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,    │
### │            │ 0xFF, 0x99, 0xDE, 0xF8, 0x36, 0x14, 0x6B, 0xC9, 0xB1, 0xB4, 0xD2, 0x28, 0x31                                                                                                                        │
### ╰────────────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
### ```
def EC_STRUCT_PATTERN [] { '\{.*\} (?<name>.+) = \{ \{ (?<field>.+) \}, \{ (?<parameters>.+) \}' }
### the field metadata
###
### # Example
### with the same example as above (see [EC_STRUCT_PATTERN]),
### the field would be `NID_X9_62_prime_field, 20, 24, 1` hence the pattern below
###
### the result for the `field` field of the EC would be
### ```
### ╭───┬───────────────────────┬──────┬────────┬───╮
### │ # │         name          │ seed │ others │ c │
### ├───┼───────────────────────┼──────┼────────┼───┤
### │ 0 │ NID_X9_62_prime_field │ 20   │ 24     │ 1 │
### ╰───┴───────────────────────┴──────┴────────┴───╯
### ```
export def EC_FIELD_PATTERN [] { "{name}, {seed}, {others}, {c}" }

### take the raw source file and isolate the "static const struct"s in a list
export def isolate_ec_structs [] {
    split list "};"
    | find "static const struct"
    | each {
        str join
        | str replace ".*static const struct" ""
        | str trim
        | str replace --all '\s+' " "
    }
}

### parse a full EC structure written in C with the constant pattern defined above (see [EC_STRUCT_PATTERN])
###
### # Example
### > see [EC_STRUCT_PATTERN] for a complete example
export def parse_ec_structs [] {
    parse --regex (EC_STRUCT_PATTERN)
}

### parse the "parameters" field of an EC structure into a record with all the actual parameters of an EC curve
###
### # Example:
### with the same example as above, this will transform
### ```
### /* seed / 0x30, 0x45, 0xAE, 0x6F, 0xC8, 0x42, 0x2F, 0x64, 0xED, 0x57, 0x95, 0x28, 0xD3, 0x81, 0x20, 0xEA, 0xE1, 0x21, 0x96, 0xD5, / p / 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, / a / 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, / b / 0x64, 0x21, 0x05, 0x19, 0xE5, 0x9C, 0x80, 0xE7, 0x0F, 0xA7, 0xE9, 0xAB, 0x72, 0x24, 0x30, 0x49, 0xFE, 0xB8, 0xDE, 0xEC, 0xC1, 0x46, 0xB9, 0xB1, / x / 0x18, 0x8D, 0xA8, 0x0E, 0xB0, 0x30, 0x90, 0xF6, 0x7C, 0xBF, 0x20, 0xEB, 0x43, 0xA1, 0x88, 0x00, 0xF4, 0xFF, 0x0A, 0xFD, 0x82, 0xFF, 0x10, 0x12, / y / 0x07, 0x19, 0x2b, 0x95, 0xff, 0xc8, 0xda, 0x78, 0x63, 0x10, 0x11, 0xed, 0x6b, 0x24, 0xcd, 0xd5, 0x73, 0xf9, 0x77, 0xa1, 0x1e, 0x79, 0x48, 0x11, / order */ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x99, 0xDE, 0xF8, 0x36, 0x14, 0x6B, 0xC9, 0xB1, 0xB4, 0xD2, 0x28, 0x31
### ```
### into
### ```
### ╭───────┬────────────────────────────────────────────────────╮
### │ seed  │ 0x3045AE6FC8422F64ED579528D38120EAE12196D5         │
### │ p     │ 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF │
### │ a     │ 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC │
### │ b     │ 0x64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1 │
### │ x     │ 0x188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012 │
### │ y     │ 0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811 │
### │ order │ 0xFFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831 │
### ╰───────┴────────────────────────────────────────────────────╯
### ```
export def parse_ec_parameters_into_record [] {
    str replace --all --string "/*" "\n/*"
    | lines -s
    | each {str trim | str replace ',$' ""}
    | parse --regex '\/\* (?<name>.*) \*\/\s*(?<value>.*)'
    | update value {|it| $it.value | str replace --all ", 0x" ""}
    | transpose -r
    | into record
}


def main [] {
    http get https://raw.githubusercontent.com/openssl/openssl/81fc390fd96ad9fae21cda919513fb696cd24028/crypto/ec/ec_curve.c
    | lines
    | isolate_ec_structs
    | parse_ec_structs
    | update name {|it| $it.name | str trim}
    | update field {|it| $it.field | parse $EC_FIELD_PATTERN}
    | update parameters {|it| $it.parameters | parse_ec_parameters_into_record}
}
